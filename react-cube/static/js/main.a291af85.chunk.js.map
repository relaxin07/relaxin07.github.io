{"version":3,"sources":["components/Item.jsx","components/Row.jsx","components/AddButons.jsx","components/RemoveButtons.jsx","App.js","serviceWorker.js","index.js"],"names":["Item","onItemMouseOver","className","onMouseOver","Row","columns","result","j","push","key","renderItem","AddBtns","onAddRow","onAddColumn","onClick","RemoveBnt","props","onRemoveCol","onRemoveRow","top","left","viewRows","viewCols","onEnter","Fragment","onMouseEnter","style","display","App","handleHiddenRemoveBtn","setState","timer","setTimeout","handleItemMouseOver","event","target","offsetTop","parentElement","offsetLeft","removeLeft","removeTop","handleRemoveRow","rows","state","handleRemoveCol","cols","handleAddColumn","handleAddRow","handleShowRemoveRow","handleClearTimer","clearTimeout","this","shape","i","hiddenRemoveBtn","onMouseLeave","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a291af85.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Item = ({ onItemMouseOver }) => {\r\n    return (\r\n        <div className=\"cube__item\" onMouseOver={onItemMouseOver}></div>\r\n    )\r\n}\r\n\r\nexport default Item;\r\n","import React from 'react';\r\nimport Item from './Item';\r\n\r\nconst Row = ({  columns, onItemMouseOver }) => {\r\n    const renderItem = columns => {\r\n        const result = [];\r\n        for (let j = 0; j < columns; j++) {\r\n            result.push(<Item  key={j} onItemMouseOver={onItemMouseOver}  />)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    return (\r\n        <div className=\"cube__row\" > {renderItem(columns)}</div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n","import React from 'react';\r\n\r\nconst AddBtns = ({ onAddRow, onAddColumn }) => {\r\n    return (\r\n        <>\r\n            <div onClick={onAddRow} className=\"cube__add cube__add-row\"><span>+</span></div>\r\n            <div onClick={onAddColumn} className=\"cube__add cube__add-item\"><span>+</span></div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddBtns;","import React from 'react';\r\n\r\nconst RemoveBnt = (props) => {\r\n    const  { onRemoveCol ,  onRemoveRow , top = 0, left = 0 , viewRows , viewCols ,onEnter }  = props;\r\n    return (\r\n        <React.Fragment>\r\n            <div onClick={onRemoveRow} onMouseEnter={onEnter} style={{ top , display: viewRows }}  className=\"cube__remove cube__remove-row\"><span>-</span></div>\r\n            <div onClick={onRemoveCol} onMouseEnter={onEnter} style={{ left  , display : viewCols  }} className={ \"cube__remove cube__remove-item\"}><span>-</span></div>\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default RemoveBnt;","import React from 'react';\nimport './App.css';\nimport Row from './components/Row';\nimport AddBtns from './components/AddButons';\nimport RemoveBtns from './components/RemoveButtons';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const { rows, cols } = props;\n    this.state = { rows, cols, removeLeft: 0, removeTop: 0, viewRows: 'none', viewCols: 'none', timer:'' };\n  }\n\n  handleHiddenRemoveBtn = () => {\n      this.setState({\n        timer : setTimeout(() => {\n          this.setState({ viewCols: \"none\", viewRows: 'none' })\n        }, 300),\n      })\n  }\n\n  handleItemMouseOver = (event) => {\n    const { parentElement: { offsetTop }, offsetLeft } = event.target\n    this.setState({ removeLeft: offsetLeft, removeTop: offsetTop });\n  }\n\n  handleRemoveRow = () => {\n    const { rows } = this.state;\n    this.setState({ rows: rows - 1 , viewRows: \"none\"})\n  }\n\n  handleRemoveCol = () => {\n    const { cols } = this.state;\n    this.setState({ cols: cols - 1  ,  viewCols: \"none\"})\n  }\n\n  handleAddColumn = () => {\n    const { cols } = this.state;\n    this.setState({ cols: cols + 1 })\n  }\n\n  handleAddRow = () => {\n    const { rows } = this.state;\n    this.setState({ rows: rows + 1 })\n  }\n\n  handleShowRemoveRow = () => {\n    const { rows, cols } = this.state;\n\n    if (rows > 1) {\n      this.setState({ viewRows: \"flex\" });\n    }\n    else {\n      this.setState({ viewRows: \"none\" });\n    }\n\n    if (cols > 1) {\n      this.setState({ viewCols: \"flex\" });\n    }\n    else {\n      this.setState({ viewCols: \"none\" });\n    }\n\n    this.handleClearTimer();\n  }\n\n  handleClearTimer  = () => {\n    const { timer } =  this.state;\n    clearTimeout(timer);\n  }\n\n  render() {\n    const { cols, rows, removeLeft, removeTop, viewRows, viewCols } = this.state;\n\n    const shape = [];\n    for (let i = 0; i < rows; i++) {\n      shape.push(\n        <Row columns={cols} key={i} hiddenRemoveBtn={this.handleHiddenRemoveBtn}  onItemMouseOver={this.handleItemMouseOver} />\n      )\n    }\n\n    return (\n      <div className=\"cube\"  onMouseEnter={this.handleShowRemoveRow } onMouseLeave={this.handleHiddenRemoveBtn}>\n        <RemoveBtns onEnter={this.handleClearTimer} viewCols={viewCols} viewRows={viewRows} onRemoveCol={this.handleRemoveCol} onRemoveRow={this.handleRemoveRow} left={removeLeft} top={removeTop} />\n        <AddBtns onAddRow={this.handleAddRow} onAddColumn={this.handleAddColumn} />\n        {shape}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App rows={4} cols={4} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}